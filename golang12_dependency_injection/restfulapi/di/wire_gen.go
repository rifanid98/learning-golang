// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/go-playground/validator"
	"github.com/google/wire"
	"golang12_dependency_injection/restfulapi/adapter"
	"golang12_dependency_injection/restfulapi/common/middleware"
	repository2 "golang12_dependency_injection/restfulapi/domain/repository"
	"golang12_dependency_injection/restfulapi/infrastructure/database"
	"golang12_dependency_injection/restfulapi/infrastructure/persistence/repository"
	"golang12_dependency_injection/restfulapi/infrastructure/router"
	"golang12_dependency_injection/restfulapi/infrastructure/server"
	"golang12_dependency_injection/restfulapi/usecase"
	"net/http"
)

// Injectors from injector.go:

func InitializedServer() *http.Server {
	categoryRepositoryImpl := repository.NewCategoryRepositoryImpl()
	db := database.NewDB()
	validate := validator.New()
	categoryInteractor := usecase.NewCategoryInteractor(categoryRepositoryImpl, db, validate)
	categoryHandler := adapter.NewCategoryHandler(categoryInteractor)
	httprouterRouter := router.NewRouter(categoryHandler)
	authMiddleware := middleware.NewAuthMiddleware(httprouterRouter)
	httpServer := server.NewServer(authMiddleware)
	return httpServer
}

// injector.go:

var categorySet = wire.NewSet(
	repository.NewCategoryRepositoryImpl,
	wire.Bind(new(repository2.CategoryRepository), new(*repository.CategoryRepositoryImpl)),
	usecase.NewCategoryInteractor,
	wire.Bind(new(usecase.CategoryUsecase), new(*usecase.CategoryInteractor)),
	adapter.NewCategoryHandler,
	wire.Bind(new(adapter.CategoryController), new(*adapter.CategoryHandler)),
)
